From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris MC <jedimastertoothless@hotmail.org>
Date: Fri, 27 Oct 2023 17:59:55 +0000
Subject: [PATCH] Add ServerProperties api


diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
index cda4544ae96a4fcb5c6c4483df67a59f1b53fd27..bb00ff6fb6368fbc6d50f15d0b594a0e909720bf 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
@@ -44,12 +44,14 @@ import net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings;
 import net.minecraft.world.level.levelgen.presets.WorldPreset;
 import net.minecraft.world.level.levelgen.presets.WorldPresets;
 import org.slf4j.Logger;
+import java.util.*;
+import java.io.*;
 
 // CraftBukkit start
 import joptsimple.OptionSet;
 // CraftBukkit end
 
-public class DedicatedServerProperties extends Settings<DedicatedServerProperties> {
+public class DedicatedServerProperties extends Settings<DedicatedServerProperties> implements org.nanaica.nanaica.properties.ServerProperties { // Nanaica
 
     static final Logger LOGGER = LogUtils.getLogger();
     private static final Pattern SHA1 = Pattern.orgpile("^[a-fA-F0-9]{40}$");
@@ -112,7 +114,31 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
 
     public final String rconIp; // Paper - Add rcon ip
 
-    // CraftBukkit start
+    // Nanaica start
+    public HashMap<String, Object> getPropertyMappings() {
+        HashMap<String, Object> map = new HashMap<>();
+
+        for (String key : this.retrieveRawProperties().stringPropertyNames()) {
+            String value = this.retrieveRawProperties().getProperty(key);
+            map.put(key, (Object) value);
+        }
+
+        return map;
+    }
+
+    public Properties getRawProperties(){
+        return this.retrieveRawProperties();
+    }
+
+    public ArrayList<String> getPropertyKeys(){
+        return new ArrayList<>(this.retrieveRawProperties().stringPropertyNames());
+    }
+
+    public File getFile(){
+        return new File(org.bukkit.craftbukkit.Main.jarLocation.getParent() + File.separator + "server.properties");
+    }
+
+    // Nanaica end -/- CraftBukkit start
     public DedicatedServerProperties(Properties properties, OptionSet optionset) {
         super(properties, optionset);
         // CraftBukkit end
@@ -174,6 +200,7 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
         final String rconIp = this.getStringRaw("rcon.ip");
         this.rconIp = rconIp == null ? this.serverIp : rconIp;
         // Paper end
+        //LOGGER.info(this.getPropertyMappings().toString());
     }
 
     // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/dedicated/Settings.java b/src/main/java/net/minecraft/server/dedicated/Settings.java
index faca42b2b5b20559f98c300b7011b67165391a0d..6bf14cf5972dd35cecfb6e9686ebb5d31ec1ab5e 100644
--- a/src/main/java/net/minecraft/server/dedicated/Settings.java
+++ b/src/main/java/net/minecraft/server/dedicated/Settings.java
@@ -21,6 +21,7 @@ import java.util.function.Supplier;
 import java.util.function.UnaryOperator;
 import javax.annotation.Nullable;
 import org.slf4j.Logger;
+import java.util.*;
 
 import joptsimple.OptionSet; // CraftBukkit
 import net.minecraft.core.RegistryAccess;
@@ -47,6 +48,12 @@ public abstract class Settings<T extends Settings<T>> {
         return value;
         // CraftBukkit end
     }
+    // Nanaica start
+    private static Properties propertiesRaw;
+    public static Properties retrieveRawProperties(){
+        return propertiesRaw;
+    }
+    // Nanaica end
 
     public static Properties loadFromFile(Path path) {
         try {
@@ -82,7 +89,8 @@ public abstract class Settings<T extends Settings<T>> {
                 if (inputstream != null) {
                     inputstream.close();
                 }
-
+                
+                propertiesRaw = properties1; // Nanaica
                 return properties1;
             } catch (CharacterCodingException charactercodingexception) {
                 Settings.LOGGER.info("Failed to load properties as UTF-8 from file {}, trying ISO_8859_1", path);
@@ -108,10 +116,12 @@ public abstract class Settings<T extends Settings<T>> {
                     bufferedreader.close();
                 }
 
+                propertiesRaw = properties1; // Nanaica
                 return properties1;
             }
         } catch (IOException ioexception) {
             Settings.LOGGER.error("Failed to load properties from file: {}", path, ioexception);
+            propertiesRaw = new Properties();
             return new Properties();
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index b85ac4c1b6d9bd89cdd13d57434f129a7d553944..5db5248cfd440fed8a2173bd2790c541b88db43b 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -739,6 +739,11 @@ public final class CraftServer implements Server {
     public String[] getStartupArgs(){
         return CraftServer.startupArgs != null ? CraftServer.startupArgs : null;
     }
+
+    @Override
+    public org.nanaica.nanaica.properties.ServerProperties getServerProperties(){
+        return getProperties();
+    }
     // Nanaica end
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 657166165037af6bd92b41a8d7547d039ff20fe8..2aa2946dc7d51de60e88448a867798c28ea438a6 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -18,6 +18,7 @@ import joptsimple.OptionSet;
 import joptsimple.util.PathConverter;
 import org.bukkit.Bukkit;
 import javax.crypto.KeyGenerator;
+import java.net.*;
 
 public class Main {
     public static boolean useJline = true;
@@ -37,10 +38,20 @@ public class Main {
         }
         return false;
     }
+
+    public static File jarLocation;
+    private static void findMainInstance(){
+        try {
+            jarLocation = new File(org.bukkit.craftbukkit.Main.class.getProtectionDomain().getCodeSource().getLocation().toURI());
+        } catch (URISyntaxException e) {
+            throw new RuntimeException(e);
+        }
+    }
     // Nanaica end
 
     public static void main(String[] args) {
         // Nanaica start - ensure loading nanaica correctly
+        findMainInstance(); // Load the jarLocation instance
         boolean checker = checkBypassLauncher(args);
         if(!NanaicaConfig.bypassStartupCheck || checker){
             try {
