From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Thu, 12 Jan 2023 05:08:07 +0900
Subject: [PATCH] SmoothBoot-Implementation


diff --git a/src/main/java/com/github/nanaica/nanaica/NanaicaConfig.java b/src/main/java/com/github/nanaica/nanaica/NanaicaConfig.java
index 2fff427280b41a23be379e55702c367ca0ef28fc..db1cb380c906cdff8aa42aad7a453647739ce2e9 100644
--- a/src/main/java/com/github/nanaica/nanaica/NanaicaConfig.java
+++ b/src/main/java/com/github/nanaica/nanaica/NanaicaConfig.java
@@ -285,10 +285,29 @@ public class NanaicaConfig {
     }
 
     public static boolean smoothBootEnable = true;
+    public static boolean smoothBootGameThreadEnable = true;
+    public static int smoothBootGameThreadPriority = 5;
+    public static boolean smoothBootBootstrapWorkerEnable = true;
+    public static int smoothBootBootstrapWorkerPriority = 3;
+    public static int smoothBootBootstrapWorkerCount = 1;
+    public static boolean smoothBootMainWorkerEnable = true;
+    public static int smoothBootMainWorkerPriority = 3;
+    public static int smoothBootMainWorkerCount = net.minecraft.util.Mth.clamp(Runtime.getRuntime().availableProcessors() - 1, 1, io.github.ultimateboomer.smoothboot.SmoothBoot.getMaxBackgroundThreads());;
+    public static boolean smoothBootIOWorkerEnable = true;
+    public static int smoothBootIOWorkerPriority = 3;
 
     private static void smoothBootConfig() {
         setComment("smooth-boot", "[ Smooth Boot ] Thread Scheduling Improvement and Tweak Mod");
         smoothBootEnable = getBoolean("smooth-boot.enable", smoothBootEnable);
+        smoothBootGameThreadEnable = getBoolean("smooth-boot.game-thread.enable", smoothBootGameThreadEnable) && smoothBootEnable;
+        smoothBootGameThreadPriority = getInt("smooth-boot.game-thread.priority", smoothBootGameThreadPriority);
+        smoothBootBootstrapWorkerEnable= getBoolean("smooth-boot.bootstrap-worker.enable", smoothBootBootstrapWorkerEnable) && smoothBootEnable;
+        smoothBootBootstrapWorkerPriority = getInt("smooth-boot.bootstrap-worker.priority", smoothBootBootstrapWorkerPriority);
+        smoothBootBootstrapWorkerCount = getInt("smooth-boot.bootstrap-worker.count", smoothBootBootstrapWorkerCount);
+        smoothBootMainWorkerEnable = getBoolean("smooth-boot.main-worker.enable", smoothBootMainWorkerEnable) && smoothBootEnable;
+        smoothBootMainWorkerPriority = getInt("smooth-boot.main-worker.priority", smoothBootMainWorkerPriority);
+        smoothBootIOWorkerEnable = getBoolean("smooth-boot.io-worker.enable", smoothBootIOWorkerEnable) && smoothBootEnable;
+        smoothBootIOWorkerPriority = getInt("smooth-boot.io-worker.priority", smoothBootIOWorkerPriority);
     }
 
     private static void smoothBootConfigSetup() {
diff --git a/src/main/java/io/github/ultimateboomer/smoothboot/SmoothBoot.java b/src/main/java/io/github/ultimateboomer/smoothboot/SmoothBoot.java
new file mode 100644
index 0000000000000000000000000000000000000000..3721544c90d8300d37b77c0e3992f4c89d9a338d
--- /dev/null
+++ b/src/main/java/io/github/ultimateboomer/smoothboot/SmoothBoot.java
@@ -0,0 +1,27 @@
+package io.github.ultimateboomer.smoothboot;
+
+import java.util.Objects;
+
+public class SmoothBoot {
+    public static boolean initBootstrap = false;
+    public static boolean initMainWorker = false;
+    public static boolean initIOWorker = false;
+
+    public static int getMaxBackgroundThreads() {
+        String string = System.getProperty("max.bg.threads");
+        if (string != null) {
+            try {
+                int i = Integer.parseInt(string);
+                if (i >= 1 && i <= 255) {
+                    return i;
+                }
+            }
+            catch (NumberFormatException ignored) {}
+        }
+        return 255;
+    }
+
+    public static <T> T select(String name, T bootstrap, T main) {
+        return Objects.equals(name, "Bootstrap") ? bootstrap : main;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/ultimateboomer/smoothboot/util/LoggingForkJoinWorkerThread.java b/src/main/java/io/github/ultimateboomer/smoothboot/util/LoggingForkJoinWorkerThread.java
new file mode 100644
index 0000000000000000000000000000000000000000..c7ab37cb49b71db4221a19191db68d8a2dc29d30
--- /dev/null
+++ b/src/main/java/io/github/ultimateboomer/smoothboot/util/LoggingForkJoinWorkerThread.java
@@ -0,0 +1,26 @@
+package io.github.ultimateboomer.smoothboot.util;
+
+import org.slf4j.Logger;
+
+import java.util.concurrent.ForkJoinPool;
+import java.util.concurrent.ForkJoinWorkerThread;
+
+public class LoggingForkJoinWorkerThread extends ForkJoinWorkerThread {
+    private final Logger logger;
+
+    public LoggingForkJoinWorkerThread(ForkJoinPool pool, Logger logger) {
+        super(pool);
+        this.logger = logger;
+    }
+
+    @Override
+    protected void onTermination(Throwable throwable) {
+        if (throwable != null) {
+            logger.warn("{} died", this.getName(), throwable);
+        } else {
+            logger.debug("{} shutdown", this.getName());
+        }
+
+        super.onTermination(throwable);
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index 4adb248e0b5df12e285ef24945dfec231f32b06d..5762d88acc9b5743fd4e71efa385bbe95845784d 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -73,14 +73,19 @@ import net.minecraft.util.TimeSource;
 import net.minecraft.util.datafix.DataFixers;
 import net.minecraft.world.level.block.state.properties.Property;
 import org.slf4j.Logger;
+// Nanaica start
+import com.github.nanaica.nanaica.NanaicaConfig;
+import io.github.ultimateboomer.smoothboot.SmoothBoot;
+import io.github.ultimateboomer.smoothboot.util.LoggingForkJoinWorkerThread;
+// Nanaica end
 
 public class Util {
     static final Logger LOGGER = LogUtils.getLogger();
     private static final int DEFAULT_MAX_THREADS = 255;
     private static final String MAX_THREADS_SYSTEM_PROPERTY = "max.bg.threads";
     private static final AtomicInteger WORKER_COUNT = new AtomicInteger(1);
-    private static final ExecutorService BOOTSTRAP_EXECUTOR = makeExecutor("Bootstrap", -2); // Paper - add -2 priority
-    private static final ExecutorService BACKGROUND_EXECUTOR = makeExecutor("Main", -1); // Paper - add -1 priority
+    private static ExecutorService BOOTSTRAP_EXECUTOR = makeExecutor("Bootstrap", -2); // Paper - add -2 priority
+    private static ExecutorService BACKGROUND_EXECUTOR = makeExecutor("Main", -1); // Paper - add -1 priority
     // Paper start - don't submit BLOCKING PROFILE LOOKUPS to the world gen thread
     public static final ExecutorService PROFILE_EXECUTOR = Executors.newFixedThreadPool(2, new java.util.concurrent.ThreadFactory() {
 
@@ -207,14 +212,65 @@ public class Util {
     }
 
     public static ExecutorService bootstrapExecutor() {
+        // Nanaica start - SmoothBoot
+        if (NanaicaConfig.smoothBootBootstrapWorkerEnable && !SmoothBoot.initBootstrap) {
+            String name = "Bootstrap";
+            BOOTSTRAP_EXECUTOR = new ForkJoinPool(Mth.clamp(SmoothBoot.select(name, NanaicaConfig.smoothBootBootstrapWorkerCount,
+                    NanaicaConfig.smoothBootMainWorkerCount), 1, 0x7fff), (forkJoinPool) -> {
+                String workerName = "Worker-" + name + "-" + WORKER_COUNT.getAndIncrement();
+
+                ForkJoinWorkerThread forkJoinWorkerThread = new LoggingForkJoinWorkerThread(forkJoinPool, LOGGER);
+                forkJoinWorkerThread.setPriority(SmoothBoot.select(name, NanaicaConfig.smoothBootBootstrapWorkerPriority,
+                        NanaicaConfig.smoothBootMainWorkerPriority));
+                forkJoinWorkerThread.setName(workerName);
+                return forkJoinWorkerThread;
+            }, Util::onThreadException, true);
+            LOGGER.debug("Bootstrap worker replaced");
+            SmoothBoot.initBootstrap = true;
+        }
+        // Nanaica end
         return BOOTSTRAP_EXECUTOR;
     }
 
     public static ExecutorService backgroundExecutor() {
+        // Nanaica start - SmoothBoot
+        if (NanaicaConfig.smoothBootMainWorkerEnable && !SmoothBoot.initMainWorker) {
+            String name = "Main";
+            BACKGROUND_EXECUTOR = new ForkJoinPool(Mth.clamp(SmoothBoot.select(name, NanaicaConfig.smoothBootBootstrapWorkerCount,
+                    NanaicaConfig.smoothBootMainWorkerCount), 1, 0x7fff), (forkJoinPool) -> {
+                String workerName = "Worker-" + name + "-" + WORKER_COUNT.getAndIncrement();
+
+                ForkJoinWorkerThread forkJoinWorkerThread = new LoggingForkJoinWorkerThread(forkJoinPool, LOGGER);
+                forkJoinWorkerThread.setPriority(SmoothBoot.select(name, NanaicaConfig.smoothBootBootstrapWorkerPriority,
+                        NanaicaConfig.smoothBootMainWorkerPriority));
+                forkJoinWorkerThread.setName(workerName);
+                return forkJoinWorkerThread;
+            }, Util::onThreadException, true);
+            LOGGER.debug("Main worker replaced");
+            SmoothBoot.initMainWorker = true;
+        }
+        // Nanaica end
         return BACKGROUND_EXECUTOR;
     }
 
     public static ExecutorService ioPool() {
+        // Nanaica start - SmoothBoot
+        if (NanaicaConfig.smoothBootIOWorkerEnable) {
+            Executors.newCachedThreadPool((runnable) -> {
+                String workerName = "IO-Worker-" + WORKER_COUNT.getAndIncrement();
+                LOGGER.debug("Initialized " + workerName);
+
+                Thread thread = new Thread(runnable);
+                thread.setName(workerName);
+                thread.setDaemon(true);
+                thread.setPriority(NanaicaConfig.smoothBootIOWorkerPriority);
+                thread.setUncaughtExceptionHandler(Util::onThreadException);
+                return thread;
+            });
+            LOGGER.debug("IO worker replaced");
+            SmoothBoot.initIOWorker = true;
+        }
+        // Nanaica end
         return IO_POOL;
     }
 
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 31faf2d6492696f7d0c99a48edbc0d6f15db1209..72b574e8fcaf7cd9c1ec6616b92963e8c704223e 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -76,6 +76,12 @@ public class Main {
 
     @DontObfuscate
     public static void main(final OptionSet optionset) { // CraftBukkit - replaces main(String[] astring)
+        // Nanaica start - SmoothBoot
+        if (com.github.nanaica.nanaica.NanaicaConfig.smoothBootGameThreadEnable) {
+            Thread.currentThread().setPriority(com.github.nanaica.nanaica.NanaicaConfig.smoothBootGameThreadPriority);
+            LOGGER.debug("Initialized server game thread");
+        }
+        // Nanaica end
         SharedConstants.tryDetectVersion();
         /* CraftBukkit start - Replace everything
         OptionParser optionparser = new OptionParser();